----------------------------------------------------------

完成了现有语法规则下的语法分析和语义分析,能够较好地输出错误信息和定位.
之前提到的two passes也实现了.
接下来我来做中间代码.接下来的任务再交给YJY.

  -- BYT 5/08

----------------------------------------------------------

(懒得写英文了)
基本完成了语义分析,可以较好地处理samples/testx.cm中的测试代码.
语义分析仅用于分析代码的正确性,所以正常情况下没有输出.
根目录的Makefile中有SEMANTIC_DEBUG宏,用于输出语义分析的过程信息,包括语法结点、行数和符号表的内容,正式使用时不能加.

运行方式有两种:
  1. cat samples/test2.cm | ./cmmc
    从stdin读取输入,输出到stdout
  2. ./cmmc samples/test2.cm
    从文件读入,输出到stdout

接下来还需要明确语法特性.我在原始的语法上添加了几条:
  1. real类型,即浮点型
  2. for循环

此外,在语义分析方面,我还可以尝试进行两遍扫描.
第一遍收集所有的函数和全局变量,第二遍是正常的语义分析.
这样做的好处是不需要注意函数定义的顺序,如main函数可以写在最前面.(无关紧要QwQ)

  -- BYT 5/07

----------------------------------------------------------

command code as follow:

  cd /src/scanner/
  .scanner < ../../samples/sample_6_function.c > out.txt

result will be store in the file out.txt


  -- LZF 4/19
----------------------------------------------------------

The language we are dealing with is C-Minus or C-Minus-Minus ?
I think it's mostly C-Minus with extensions in C-Minus-Minus.
  -- BYT 3/21
----------------------------------------------------------
